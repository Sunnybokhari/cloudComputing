{"ast":null,"code":"var _jsxFileName = \"/Users/sunnybokhari/Documents/cloudComputing/my-task-manager-frontend/src/components/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from \"./Modal\"; // Import the Modal component\nimport \"./Task.css\"; // Create and import a CSS file for styling if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = ({\n  id,\n  title,\n  description,\n  dueDate,\n  priority,\n  status,\n  fileUrl\n}) => {\n  _s();\n  const [isModalOpen, setModalOpen] = useState(false);\n  const toggleModal = () => {\n    setModalOpen(!isModalOpen);\n  };\n  const handleDelete = () => {\n    fetch(`http://localhost:3001/task/${id}`, {\n      method: 'DELETE',\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Optionally, refresh the tasks list or redirect\n      window.location.reload(); // This is a simple way to refresh the tasks\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Due Date: \", dueDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Priority: \", priority]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleModal,\n      className: \"view-attachment-btn\",\n      children: \"View Attachment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: toggleModal,\n      children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n        src: fileUrl,\n        title: \"Attachment\",\n        className: \"attachment-iframe\",\n        allowFullScreen: true // Optional: if you want to allow full-screen mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Task, \"o+ymuZc6VVdUpCAroHabBGZ51VI=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","Modal","jsxDEV","_jsxDEV","Task","id","title","description","dueDate","priority","status","fileUrl","_s","isModalOpen","setModalOpen","toggleModal","handleDelete","fetch","method","credentials","then","response","ok","Error","window","location","reload","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","src","allowFullScreen","_c","$RefreshReg$"],"sources":["/Users/sunnybokhari/Documents/cloudComputing/my-task-manager-frontend/src/components/Task.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"./Modal\"; // Import the Modal component\nimport \"./Task.css\"; // Create and import a CSS file for styling if needed\n\nconst Task = ({\n  id,\n  title,\n  description,\n  dueDate,\n  priority,\n  status,\n  fileUrl,\n}) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  const toggleModal = () => {\n    setModalOpen(!isModalOpen);\n  };\n\n  const handleDelete = () => {\n    fetch(`http://localhost:3001/task/${id}`, {\n      method: 'DELETE',\n      credentials: 'include'\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Optionally, refresh the tasks list or redirect\n      window.location.reload(); // This is a simple way to refresh the tasks\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  \n  return (\n    <div className=\"task\">\n      <h3>{title}</h3>\n      <p>{description}</p>\n      <p>Due Date: {dueDate}</p>\n      <p>Priority: {priority}</p>\n      <p>Status: {status}</p>\n      {fileUrl && (\n        <button onClick={toggleModal} className=\"view-attachment-btn\">\n          View Attachment\n        </button>\n      )}\n\n      <Modal isOpen={isModalOpen} onClose={toggleModal}>\n        {/* Content you want to show in the modal, e.g., an image or document */}\n        <iframe\n          src={fileUrl}\n          title=\"Attachment\"\n          className=\"attachment-iframe\"\n          allowFullScreen // Optional: if you want to allow full-screen mode\n        />{\" \"}\n      </Modal>\n    </div>\n  );\n};\n\nexport default Task;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}